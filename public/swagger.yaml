openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks and user authentication.

servers:
  - url: http://127.0.0.1:8000/api/
    description: Local development server

paths:
  /user:
    get:
      tags:
        - Users
      summary: Get the authenticated user
      description: Retrieves the details of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated user retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Authenticated user retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

  /user/{id}:
    put:
      tags:
        - Users
      summary: Update a user
      description: Updates the specified user details.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Mootez
                email:
                  type: string
                  example: mootez@gmail.com
                password:
                  type: string
                  example: 123456
                password_confirmation:
                  type: string
                  example: 123456
              required:
                - email
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The given data was invalid.

    delete:
      tags:
        - Users
      summary: Delete a user
      description: Deletes the specified user.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.

  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Mootez
                email:
                  type: string
                  example: mootez@gmail.com
                password:
                  type: string
                  example: 123
                password_confirmation:
                  type: string
                  example: 123
              required:
                - name
                - email
                - password
                - password_confirmation
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: 1|abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The given data was invalid.

  /login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      description: Authenticates a user and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mootez@gmail.com
                password:
                  type: string
                  example: 123
              required:
                - email
                - password
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: 1|abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The provided credentials are incorrect.

  /logout:
    post:
      tags:
        - Authentication
      summary: Log out the current user
      description: Logs out the authenticated user and invalidates the token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are logged out.
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

  /tasks:
    get:
      summary: Get all tasks
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    delete:
      summary: Delete a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found

  /statistics:
    get:
      tags:
        - Statistics
      summary: Get task statistics for the authenticated user
      description: Retrieve the count and list of pending, done, and canceled tasks for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Task statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatistics'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated.

  /subtasks/{task_id}:
    get:
      summary: Get all subtasks for a task
      tags:
        - Subtasks
      security:
        - bearerAuth: []
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of subtasks for the given task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubTask'
        '404':
          description: No subtasks found for this task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No SubTasks found for this task
  /subtasks:
    post:
      summary: Create a new subtask for a task
      tags:
        - Subtasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubTaskInput'
      responses:
        '201':
          description: Subtask created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: SubTask created successfully
                  subTask:
                    $ref: '#/components/schemas/SubTask'

  /subtasks/{id}:
    put:
      summary: Update a subtask
      tags:
        - Subtasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubTaskInput'
      responses:
        '200':
          description: Subtask updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: SubTask updated successfully
                  subTask:
                    $ref: '#/components/schemas/SubTask'
        '404':
          description: Subtask not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: SubTask not found

    delete:
      summary: Delete a subtask
      tags:
        - Subtasks
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Subtask deleted successfully
        '404':
          description: Subtask not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: SubTask not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Mootez
        email:
          type: string
          example: mootez@gmail.com
        created_at:
          type: string
          format: date-time
          example: '2024-09-22T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-09-22T12:34:56Z'

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, done, canceled]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, done, canceled]
      required:
        - title
        - status

    SubTask:
      type: object
      properties:
        id:
          type: integer
        task_id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - pending
            - done
            - canceled
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SubTaskInput:
      type: object
      properties:
        task_id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - pending
            - done
            - canceled
      required:
        - task_id
        - title

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
